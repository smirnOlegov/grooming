# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
import os
import datetime
import re
import json
from dotenv import load_dotenv
from whatsapp_chatbot_python import GreenAPIBot, Notification
from fsm import States
from gpt import get_gpt_response
from knowledge import get_system_prompt, get_cached_data, find_relevant_services
from scraper import get_dikidi_schedule, set_custom_user_agent, create_dikidi_booking
from babel.dates import format_datetime
from selenium_booking import book_dikidi

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
load_dotenv(dotenv_path='secret')
ID_INSTANCE = os.getenv("ID_INSTANCE")
API_TOKEN_INSTANCE = os.getenv("API_TOKEN_INSTANCE")
DIKIDI_PROJECT_ID = "322422"  # –î–æ–±–∞–≤–ª—è–µ–º project_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = GreenAPIBot(ID_INSTANCE, API_TOKEN_INSTANCE)
user_agent = os.getenv("USER_AGENT")
if user_agent:
    set_custom_user_agent(user_agent)

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±—Ä–∞–Ω project_id, —Ç.–∫. API —Ç—Ä–µ–±—É–µ—Ç company_id
# DIKIDI_PROJECT_ID = "322422"
MAX_HISTORY_MESSAGES = 20  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è GPT (10 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
BRANCHES = [{
    'id': 'alfa',
    'name': 'ALFA grooming –°—Ç—Ä–æ–≥–∏–Ω–æ',
    'company_id': '658503',
    'url': 'https://dikidi.net/g322422?p=2.sp-pi-po&c=658503',
    'address': '–¢–∞–ª–ª–∏–Ω—Å–∫–∞—è 9',
    'phone': '+79993440009'
}, {
    'id': 'center',
    'name': 'ALFA grooming –©—É–∫–∏–Ω–æ',
    'company_id': '1343398',  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π company_id
    'url': 'https://dikidi.net/g322422?p=2.sp-pi-po&c=1343398',
    'address': '–†–æ–≥–æ–≤–∞ 15–∫1',
    'phone': '+79993440009'
}]

conversation_histories = {}
booking_data = {}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–æ—à–∞–≥–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
STEP_KEYWORDS = ["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—Å—å", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"]

def is_step_keyword(text):
    text = text.lower()
    return any(word in text for word in STEP_KEYWORDS)

REMIND_STEP = "\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—É—é –∑–∞–ø–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–∑–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---


def base_service_name(name: str) -> str:
    name = name.split('|', 1)[0]
    name = re.sub(r"\s*\([^)]*\)$", "", name)
    return name.strip()


def find_best_match(query: str, candidates: list, key_func):
    if not query or not candidates:
        return None
    # –ï—Å–ª–∏ query ‚Äî dict, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å name
    if isinstance(query, dict):
        query = query.get('name', '')
    if not isinstance(query, str):
        query = str(query)
    query_words = set(re.findall(r'\w+', query.lower()))
    best_match, max_score = None, 0
    for candidate in candidates:
        candidate_name = key_func(candidate)
        # –ï—Å–ª–∏ candidate_name ‚Äî dict, –±–µ—Ä–µ–º name
        if isinstance(candidate_name, dict):
            candidate_name = candidate_name.get('name', '')
        # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ ---
        candidate_name = str(candidate_name)
        candidate_words = set(re.findall(r'\w+', candidate_name.lower()))
        score = len(query_words.intersection(candidate_words))
        if score > max_score:
            max_score, best_match = score, candidate
    return best_match if max_score > 0 else None


def send_message_via_greenapi(chat_id: str, text: str):
    """–Ø–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Green API (–º–∏–Ω—É—è notification.answer)."""
    import requests
    instance_id = os.getenv("ID_INSTANCE")
    api_token = os.getenv("API_TOKEN_INSTANCE")
    # –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ print
    if not instance_id or not api_token:
        return False
    url = f"https://api.green-api.com/waInstance{instance_id}/sendMessage/{api_token}"
    payload = {
        "chatId": chat_id,
        "message": text
    }
    try:
        resp = requests.post(url, json=payload, timeout=10)
        return resp.status_code == 200
    except Exception:
        return False


# --- –í–†–ï–ú–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ê ---
def test_greenapi_send():
    test_chat_id = "79810100476@c.us"
    test_text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç GreenAPI (—Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)"
    ok = send_message_via_greenapi(test_chat_id, test_text)
    # –£–¥–∞–ª—ë–Ω print


def start_new_booking(notification: Notification):
    sender = notification.sender
    booking_data[sender] = {}
    intro = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≥—Ä—É–º–∏–Ω–≥-—Å–∞–ª–æ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —É—Å–ª—É–≥–∞–º, –º–∞—Å—Ç–µ—Ä–∞–º, –∂–∏–≤–æ—Ç–Ω—ã–º –∏ —É—Ö–æ–¥—É ‚Äî —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!\n"
        "\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ ¬´–∑–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª ‚Äî –∏ —è –ø—Ä–æ–≤–µ–¥—É –≤–∞—Å –ø–æ —à–∞–≥–∞–º –∑–∞–ø–∏—Å–∏."
    )
    send_message_via_greenapi(sender, intro)
    try:
        notification.state_manager.reset_state(sender)
    except Exception:
        pass


@bot.router.message(state=States.CHOOSE_BRANCH)
def choose_branch_handler(notification: Notification):
    sender, text = notification.sender, notification.message_text.strip()
    if not text.isdigit():
        history = conversation_histories.setdefault(sender, [])
        history.append({"role": "user", "content": text})
        all_masters, all_services = get_cached_data()
        system_prompt = get_system_prompt(all_masters, all_services)
        response = get_gpt_response(history[-MAX_HISTORY_MESSAGES:], system_prompt)
        notification.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! üòä\n{response}\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –µ—â—ë –≤–æ–ø—Ä–æ—Å.")
        history.append({"role": "assistant", "content": response})
        return
    try:
        branch_index = int(text) - 1
        if 0 <= branch_index < len(BRANCHES):
            branch = BRANCHES[branch_index]
            booking_data[sender]['branch'] = branch
            masters, services = get_cached_data(branch['company_id'])
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ company_id —Ñ–∏–ª–∏–∞–ª–∞, –µ—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å
            filtered_masters = [m for m in masters if str(m.get('company_id')) == str(branch['company_id'])] if masters and 'company_id' in masters[0] else masters
            booking_data[sender]['ALL_MASTERS'] = filtered_masters
            booking_data[sender]['ALL_SERVICES'] = services
            notification.answer("–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª! üòä\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–º–æ–ø—Å', '–±—Ä–∏—Ç–∞–Ω—Å–∫–∞—è –∫–æ—à–∫–∞', '–π–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä'). –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—Å–ª—É–≥–∞–º ‚Äî —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–¥—Å–∫–∞–∂—É!")
            notification.state_manager.set_state(sender, States.CHOOSE_SERVICE)
        else:
            raise ValueError
    except (ValueError, IndexError):
        notification.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî —Å–º–µ–ª–æ —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!")


@bot.router.message(state=States.CHOOSE_SERVICE)
def choose_service_handler(notification: Notification):
    sender, text = notification.sender, notification.message_text.strip()
    if not text or len(text.split()) < 2 and not text.isalpha():
        history = conversation_histories.setdefault(sender, [])
        history.append({"role": "user", "content": text})
        all_masters, all_services = get_cached_data()
        system_prompt = get_system_prompt(all_masters, all_services)
        response = get_gpt_response(history[-MAX_HISTORY_MESSAGES:], system_prompt)
        notification.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! üêæ\n{response}\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ—Ä–æ–¥—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –ª–∏–±–æ –∑–∞–¥–∞–π—Ç–µ –µ—â—ë –≤–æ–ø—Ä–æ—Å.")
        history.append({"role": "assistant", "content": response})
        return
    all_services = booking_data[sender].get('ALL_SERVICES', [])
    top_services = find_relevant_services(text, all_services, top_k=9)
    services_str = "\n".join([
        f"{i+1}. {s['name']} ({s.get('price','')})" for i, s in enumerate(top_services)
    ])
    notification.answer(
        f"–í–æ—Ç 9 —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª—É–≥ (–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä):\n{services_str}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
    )
    booking_data[sender]['top_services'] = top_services
    notification.state_manager.set_state(sender, States.CHOOSE_SERVICE_SELECT)


@bot.router.message(state=States.CHOOSE_SERVICE_SELECT)
def choose_service_select_handler(notification: Notification):
    sender, text = notification.sender, notification.message_text.strip()
    if not text.isdigit():
        history = conversation_histories.setdefault(sender, [])
        history.append({"role": "user", "content": text})
        all_masters, all_services = get_cached_data()
        system_prompt = get_system_prompt(all_masters, all_services)
        response = get_gpt_response(history[-MAX_HISTORY_MESSAGES:], system_prompt)
        notification.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n{response}\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –µ—â—ë –≤–æ–ø—Ä–æ—Å.")
        history.append({"role": "assistant", "content": response})
        return
    try:
        service_index = int(text) - 1
        top_services = booking_data[sender]['top_services']
        if 0 <= service_index < len(top_services):
            selected_service = top_services[service_index]
            booking_data[sender]['service'] = selected_service
            all_masters = booking_data[sender]['ALL_MASTERS']
            if not all_masters:
                notification.answer("[DEBUG] all_masters is empty! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª–∏–∞–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            master_ids = selected_service.get('master_ids', [])
            branch = booking_data[sender]['branch']
            branch_company_id = str(branch['company_id'])
            # DEBUG: –≤—ã–≤–æ–¥–∏–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º (—Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å)
            debug_msg = f"[DEBUG] master_ids={master_ids}, branch_company_id={branch_company_id}, all_masters={[{'id': m.get('id'), 'company_id': m.get('company_id')} for m in all_masters]}"
            print(debug_msg)
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ master_ids –∏ company_id —Ñ–∏–ª–∏–∞–ª–∞
            if master_ids:
                eligible_masters = [m for m in all_masters if m['id'] in master_ids and str(m.get('company_id')) == branch_company_id]
            else:
                eligible_masters = [m for m in all_masters if str(m.get('company_id')) == branch_company_id]
            if not eligible_masters:
                notification.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.")
                return
            masters_str = "\n".join([
                f"{i+1}. {m['name']} ({m.get('specialization','')})" for i, m in enumerate(eligible_masters)
            ])
            booking_data[sender]['eligible_masters'] = eligible_masters
            notification.answer(f"–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É—Å–ª—É–≥–∏ '{selected_service['name']}':\n{masters_str}\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–æ–≥–æ –≤—ã–±—Ä–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, –∏ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º!")
            notification.state_manager.set_state(sender, States.CHOOSE_MASTER)
        else:
            raise ValueError
    except (ValueError, IndexError):
        notification.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!")


@bot.router.message(state=States.CHOOSE_MASTER)
def choose_master_handler(notification: Notification):
    sender, text = notification.sender, notification.message_text.strip()
    if not text.isdigit():
        history = conversation_histories.setdefault(sender, [])
        history.append({"role": "user", "content": text})
        all_masters, all_services = get_cached_data()
        system_prompt = get_system_prompt(all_masters, all_services)
        response = get_gpt_response(history[-MAX_HISTORY_MESSAGES:], system_prompt)
        notification.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n{response}\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –µ—â—ë –≤–æ–ø—Ä–æ—Å.")
        history.append({"role": "assistant", "content": response})
        return
    try:
        master_index = int(text) - 1
        eligible_masters = booking_data[sender]['eligible_masters']
        if 0 <= master_index < len(eligible_masters):
            master = eligible_masters[master_index]
            booking_data[sender]['master'] = master
            selected_service = booking_data[sender]['service']
            notification.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: {master['name']} –∏ —É—Å–ª—É–≥—É: {selected_service['name']}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
            )
            _start_date_time_selection(notification)
        else:
            raise ValueError
    except (ValueError, IndexError):
        notification.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, –∏ —è –ø–æ–º–æ–≥—É!")


def _start_date_time_selection(notification: Notification):
    sender = notification.sender
    try:
        service = booking_data[sender]['service']
        branch = booking_data[sender]['branch']
        master = booking_data[sender]['master']
        schedule = get_dikidi_schedule(branch['company_id'], service['id'], master['id'])
        booking_data[sender]['schedule_data'] = schedule
        available_dates = []
        now = datetime.datetime.now().date()
        if schedule:
            slots = schedule.get(str(master['id'])) or schedule.get(master['id']) or []
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ª–æ—Ç
            all_dates = [dt.split()[0] for dt in slots]
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞—Ç—ã
            available_dates = sorted({date for date in all_dates if datetime.datetime.strptime(date, '%Y-%m-%d').date() >= now})
        if not available_dates:
            notification.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –º–∞—Å—Ç–µ—Ä–∞."
            )
            start_new_booking(notification)
            return
        booking_data[sender]['available_dates'] = available_dates
        dates_list = []
        for i, date_str in enumerate(available_dates):
            dt_obj = datetime.datetime.strptime(date_str, '%Y-%m-%d')
            formatted_date = format_datetime(dt_obj, 'd MMMM, EEEE', locale='ru_RU')
            dates_list.append(f"{i+1}. {formatted_date.capitalize()}")
        dates_str = "\n".join(dates_list)
        notification.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:\n{dates_str}")
        notification.state_manager.set_state(sender, States.CHOOSE_DAY)
    except Exception:
        notification.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        start_new_booking(notification)


@bot.router.message(state=States.CHOOSE_DAY)
def choose_day_handler(notification: Notification):
    sender, text = notification.sender, notification.message_text.strip()
    if not text.isdigit():
        history = conversation_histories.setdefault(sender, [])
        history.append({"role": "user", "content": text})
        all_masters, all_services = get_cached_data()
        system_prompt = get_system_prompt(all_masters, all_services)
        response = get_gpt_response(history[-MAX_HISTORY_MESSAGES:], system_prompt)
        notification.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n{response}\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∞—Ç—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –µ—â—ë –≤–æ–ø—Ä–æ—Å.")
        history.append({"role": "assistant", "content": response})
        return
    try:
        date_index = int(text) - 1
        available_dates = booking_data[sender].get('available_dates', [])
        if 0 <= date_index < len(available_dates):
            selected_date = available_dates[date_index]
            booking_data[sender]['date'] = selected_date
            schedule = booking_data[sender].get('schedule_data', {})
            master = booking_data[sender]['master']
            master_id = str(master['id']);
            slots = schedule.get(master_id) or schedule.get(int(master_id)) or []
            available_times = [dt.split()[1] for dt in slots if dt.split()[0] == selected_date]
            if not available_times:
                notification.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.")
                return
            booking_data[sender]['available_times'] = available_times
            times_str = "\n".join([f"{i+1}. {t}" for i, t in enumerate(available_times)])
            notification.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:\n{times_str}\n–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, –∏ —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å! üòä")
            notification.state_manager.set_state(sender, States.CHOOSE_TIME)
        else:
            raise ValueError
    except (ValueError, IndexError):
        notification.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!")


@bot.router.message(state=States.CHOOSE_TIME)
def choose_time_handler(notification: Notification):
    sender, text = notification.sender, notification.message_text.strip()
    if not text.isdigit():
        history = conversation_histories.setdefault(sender, [])
        history.append({"role": "user", "content": text})
        all_masters, all_services = get_cached_data()
        system_prompt = get_system_prompt(all_masters, all_services)
        response = get_gpt_response(history[-MAX_HISTORY_MESSAGES:], system_prompt)
        notification.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n{response}\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –µ—â—ë –≤–æ–ø—Ä–æ—Å.")
        history.append({"role": "assistant", "content": response})
        return
    try:
        time_index = int(text) - 1
        available_times = booking_data[sender].get('available_times', [])
        if 0 <= time_index < len(available_times):
            selected_time = available_times[time_index]
            booking_data[sender]['time'] = selected_time
            notification.answer("–ü–æ—á—Ç–∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É!")
            notification.state_manager.set_state(sender, States.BOOKING_CONFIRM)
        else:
            raise ValueError
    except (ValueError, IndexError):
        notification.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!")


@bot.router.message(state=States.BOOKING_CONFIRM)
def booking_confirm_handler(notification: Notification):
    sender, contact = notification.sender, notification.message_text.strip()

    if not (re.match(r"^\+?\d{10,15}$", contact) or re.match(r"^[^@\s]+@[^@\s]+\.[^@\s]+$", contact)):
        history = conversation_histories.setdefault(sender, [])
        history.append({"role": "user", "content": contact})
        all_masters, all_services = get_cached_data()
        system_prompt = get_system_prompt(all_masters, all_services)
        response = get_gpt_response(history[-MAX_HISTORY_MESSAGES:], system_prompt)
        notification.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n{response}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!")
        history.append({"role": "assistant", "content": response})

        return
    
    data = booking_data[sender]
    phone = contact if re.match(r'^\+?\d', contact) else ''
    email = contact if '@' in contact else ''
    branch = data.get('branch', {})
    service = data.get('service', {})
    master = data.get('master', {})
    master_name = master.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    date = data.get('date', '')
    time_ = data.get('time', '')
    url = branch.get('url', '')
    service_name = service.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    print(f"[DEBUG][API] company_id={branch.get('company_id')}, service_id={service.get('id')}, master_id={master.get('id')}, date={date}, time={time_}, phone={phone}, email={email}")
    try:
        result = create_dikidi_booking(
            company_id=branch.get('company_id'),
            service_id=service.get('id'),
            master_id=master.get('id'),
            date=date,
            time=time_,
            phone=phone,
            email=email
        )
        if result.get('success'):
            notification.answer(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API!\n\n–§–∏–ª–∏–∞–ª: {branch.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–£—Å–ª—É–≥–∞: {service_name}\n–ú–∞—Å—Ç–µ—Ä: {master_name}\n–î–∞—Ç–∞: {date} {time_}\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üòä")
            notification.state_manager.reset_state(sender)
            booking_data[sender] = {}
        else:
            notification.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ API. {result.get('message', '')} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!")
    except Exception as e:
        print(f"[ERROR][API] {e}")
        notification.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ API: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!")


@bot.router.message()
def universal_handler(notification: Notification):
    sender, text = notification.sender, notification.message_text.strip()
    # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏ (–∏ —Ç–æ–ª—å–∫–æ –µ–≥–æ)
    if is_step_keyword(text):
        # –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ
        booking_data[sender] = {}
        conversation_histories[sender] = []
        # –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–≤—ã–π —à–∞–≥ (–≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞)
        branches_str = "\n".join([
            f"{i+1}. {b['name']}" for i, b in enumerate(BRANCHES)])
        notification.answer(
            f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–ø–∏—Å—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:\n{branches_str}\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª–∏–∞–ª–∞.")
        notification.state_manager.set_state(sender, States.CHOOSE_BRANCH)
        return
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ (–¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    history = conversation_histories.setdefault(sender, [])
    history.append({"role": "user", "content": text})
    all_masters, all_services = get_cached_data()
    system_prompt = get_system_prompt(all_masters, all_services)
    booking_data.setdefault(sender, {})['ALL_MASTERS'] = all_masters
    booking_data.setdefault(sender, {})['ALL_SERVICES'] = all_services
    response = get_gpt_response(history[-MAX_HISTORY_MESSAGES:], system_prompt)
    notification.answer(response)
    history.append({"role": "assistant", "content": response})


if __name__ == "__main__":

    bot.run_forever()